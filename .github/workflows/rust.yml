name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:

  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up cache for Protobuf
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/bin/protoc
          ~/.cache/protobuf
        key: ${{ inputs.runner_os }}-protobuf-${{ hashFiles('/home/runner/.local/include/google/protobuf/descriptor.proto') }}
        restore-keys: |
          ${{ inputs.runner_os }}-protobuf-

    - name: Install Protobuf
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        # Install Protoc.
        wget https://github.com/protocolbuffers/protobuf/releases/download/v21.3/protoc-21.3-linux-x86_64.zip
        unzip -o protoc-21.3-linux-x86_64.zip -d ~/.local

    - name: Cache Cargo bin (for sqlx-cli)
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/sqlx
        key: sqlx-cli-${{ inputs.runner_os }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          sqlx-cli-${{ inputs.runner_os }}-

    - name: Install SQLx CLI if not cached
      run: |
        if ! command -v sqlx &> /dev/null; then
          cargo install sqlx-cli
        else
          echo "sqlx-cli found in cache, skipping installation"
        fi

    - name: Verify SQLx installation
      run: sqlx --version

    - name: Setup sqlx
      run: cd client/database/ && sqlx db create -D sqlite://dev.db && sqlx migrate run -D sqlite://dev.db && cd ../..


  fmt:    
    runs-on: ubuntu-latest
    needs: setup
    steps: 
    - name: Run fmt
      run: cargo fmt --all -- --check

  clippy:
    runs-on: ubuntu-latest
    needs: setup
    steps:   
    - name: Run Clippy
      run: DATABASE_URL=${{ secrets.DATABASE_URL_CLIENT }} cargo clippy --all-targets --all-features -- -D warnings
  
  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Run Test
      run: DATABASE_URL=${{ secrets.DATABASE_URL_CLIENT }} cargo test --all 
